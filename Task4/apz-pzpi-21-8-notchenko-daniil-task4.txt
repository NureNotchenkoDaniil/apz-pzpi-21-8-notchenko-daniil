МЕТА РОБОТИ


	Метою лабораторної роботи є створення клієнтської Web частини для проекту за темою «Програмна система для моніторингу документації та стану здоров’я тварин з метою створення єдиного цифрового реєстру тварин та запобіганню підробок документів “I-Pet”». Ця частина системи повинна підтримувати роботу клієнтів у веб-режимі та забезпечувати адміністрування системи.

ХІД РОБОТИ

	У ході лабораторної роботи було розробленно Front-end частину застосунку для для моніторингу документації та стану здоров’я тварин з метою створення єдиного цифрового реєстру тварин та запобіганню підробок документів «I-Pet». Вона призначена для звичайних користувачів системи, ветеринарів, держслужбовців та адміністраторів. Клієнтська частина була розроблена на мові програмування JavaScript з використанням бібліотеки Vue.js. Для зв’язку із серверною частиною програмної системи було використано технологію axios та async/await. Ці механізми дозволяють асинхронно відправляти на серверну частину запити. Було реалізовано локалізацію за допомогою бібліотеки i18n для англійської та української мови усього інтерфейсу клієнтської частини.
 
1 ДІАГРАМА ПРЕЦЕДЕНТІВ

	На рисунку А.1 у додатку А зображено діаграму прецедентів для клієнтської частини системи «I-Pet». На діаграмі зображено можливості всіх існуючих типів користувачів, таких як звичайні користувачі, ветеринари, держслужбовці та адміністратори системи.
	На діаграмі можна побачити що користувач може авторизуватися або зареєструватися, переглянути особистий профіль, створити новий профіль тварини, переглянути профілі власних тварин, видалити профіль тварини, переглянути історії хвороби своїх тварин. Ветеринар може авторизуватися, створити нову історію хвороби тварини, переглянути профілі всіх тварин, редагувати статус вакцинації тварин, переглядати історії хвороби всіх тварин, шукати певну історію хвороби, редагувати та видаляти історії хвороби. Держслужбовець може авторизуватися, переглядати всі профілі тварин та історії хвороби та шукати певні профілі та історії. Адміністратор може авторизуватися, переглядати та виконувати пошук усіх профілів тварин та історій хвороби, переглядати список усіх користувачів та блокувати і розблоковувати їх, створювати та видаляти типи тварин та створювати резервні копії бази даних.
 
2 ДІАГРАМА КОМПОНЕНТІВ

	У додатку Б на рисунку Б.1 зображена діаграма компонентів. На діаграмі можна побачити побудову взаємодії між компонентами програмної системи: клієнтською частиною та серверною. На діаграмі видно, що клієнтська частина містить основні компоненти: AdminPage, HomePege, NavBar, PetsPage, ProfilePage, SpecificPetPage, SignInPage, SingUpPage, CreateNewPetPage, CreateDeseasePage. Через ці компоненти відбувається взаємодія з серверною частиною, а також на діаграмі видно основний компонент App.js, який відповідає за відображення компонентів та маршрутизацію.
 
3 ДІАГРАМА ВЗАЄМОДІЇ

	У додатку В на рисунку В.1 зображено діаграму взаємодії для процессу створення нового профілю тварини. На діаграмі видно що спочатку користувачу необхідно пройти процес авторизації, далі він має створити новий профіль тварини, заповнивши основні дані про тварину. Після створення профілю тварини користувач має можливість переглянути існуючи профілі власних тварин у вигляді форм та видалити профіль певної тварини.
 
4 ДІАГРАМА СТАНІВ

	У додатку Г на рисунку Г.1 зображено діаграму станів клієнтської частини програмної системи «I-Pet», на діаграмі зображено процес роботи користувача із системою. На діаграмі видно, що спочатку користувачу необхідно пройти процес авторизації, після чого користувач може перейти на сторінки перегляду профілів тварин, перегляду власного профілю та створення нового профілю тварини. При переході до сторінки перегляду профілів тварин користувач також може видаляти певні профілі.
 
5 АРХІТЕКТУРА КЛІЄНТСЬКОЇ ЧАСТИНИ

	Для архітектури клієнтської частини програмної системи було використано стандартну архітектуру проектів з використанням Vue.js, де створюються кореневі директорії src та public, файли App.js, main.js, package.json. Також у середині деректорії src було створено дерикторією components для зберігання компонентів програмної системи.
	У додатку Д на рисунку Д.1 зображено структуру клієнтської частини програмної системи «I-Pet». На рисунку можна побачити, що головною дирикторією є src, в середині неї є дериткорія components у якій зберігаються всі компоненти системи. Також у дерикторії src зберігаються locales.js, що відповідає за локалізацію завдяки використанню бібліотеки i18n, router.js, що відповідає за маршрутизацію, код роутера наведено у додатку Ж, та axios.js, що відповідаю за використання axios для роботи з API завдяки використанню бібліотеки Axios. Приклади компонентів наведено у додатку Е.
 
ВИСНОВКИ

У даній лабораторній роботі було створено клієнтську (front-end) частину програмної системи за темою «Програмна система для моніторингу документації та стану здоров’я тварин з метою створення єдиного цифрового реєстру тварин та запобіганню підробок документів “I-Pet”».  з використанням бібліотеки Vue.js. 
За допомогою http запитів та бібліотеки axios усі компоненти front-end частини було пов’язано з back-end частиною. Було додано локалізацію інтерфейсу для англійської та української мов за допомогою бібліотеки i18n.
Посилання на демо-відео:
https://youtu.be/7kAlPOCAy6Q
Посилання на репозиторій GitHub:
https://github.com/NureNotchenkoDaniil/apz-pzpi-21-8-notchenko-daniil

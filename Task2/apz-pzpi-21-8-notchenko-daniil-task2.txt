МЕТА РОБОТИ

	Мета цієї лабораторної роботи це  розробка back-end частини для проекту за темою «Програмна система для моніторингу документації та стану здоров’я тварин з метою створення єдиного цифрового реєстру тварин та запобіганню підробок документів “I-Pet”».	

ХІД РОБОТИ

	У ході лабораторної роботи було розроблено back-end частину системи для моніторингу документації та стану здоров’я тварин з метою створення єдиного цифрового реєстру тварин та запобіганню підробок документів “I-Pet”. Серверна частина була написана на мові Python з використанням фреймворку FastAPI у середовищі PyCharm. Проект використовує реляційну базу даних MySQL. Було створено розділення ролей на звичайних користувачів, ветеринарів, держслужбовців та адміністраторів. Реалізована перевірка ролей користувачів. Для шифрування паролів та створення токенів було використано JWT(JSON Web Tokens) ).
 
1	ДІАГРАМА РОЗГОРТАННЯ

	Для створення серверної частини проекту було використано мову програмування Python разом з фреймворком FastAPI. 
	Для зв’язку з базою даних, створення моделей та зв’язків між таблицями було обрано Tortoise ORM. Tortoise ORM є зручним інструментом для роботи з базами даних, бо надає простий та інтуїтивний спосіб взаємодії через об’єктно-реляційну модель. Він має підтримку асинхронної роботи працює з різними СУБД, зокрема з використаною у проекті MySQL, та автоматично генерує SQL-запити на основі визначень моделей, що забезпечує високий рівень надійності та продуктивності при роботі з базою даних.
	Для створення токенів авторизації та шифрування паролів було використано JSON Web Token, який є компактним та досить безпечним варіантом передачі інформації між сторонами за допомогою JSON-об’єктів. Це дозволяє генерувати, перевіряти токени авторизації та забезпечує шифрування паролів користувачів системи.
	Проект розділено на три шари:
-	User Interface – конфігурація та запити, через які користувач взаємодіє з API.
-	Бізнес-логіка – моделі даних та обробка даних.
-	Доступ до даних – створення таблиць бази даних, міграція та взаємодія із сервером.
Deployment Diagram(Діаграма розгортання) зображено у додатку А на рисунку А.1.
 
2	ДІАГРАМА ПРЕЦЕДЕНТІВ

	Діаграма прецедентів для архітектури системи зображена на рисунку Б.1 у додатку Б. На діаграмі зображено, що у системі є користувачі з різними ролями: адміністратор має змогу управляти даними про типи тварин, переглядати усі данні про тварин та створювати резервні копії бази даних, ветеринар має можливість управляти історіями хвороби тварин, статусом їх вакцинації та має можливість переглядати інформацію про всіх тварин. Держслужбовець має можливість отримувати всю інформацію про тварин.
	Користувач має можливість зареєструватися, увійти в систему, створювати та видаляти профілі своїх тварин, переглядати всю інформацію про власних тварин. Приклад контролера для створення нового профілю тварини наведено у додатку Ж.
 
3 ER-МОДЕЛЬ ДАНИХ

У додатку В на рисунку В.1 зображено ER-модель даних. Для розробки програмного продукту було використано реляційну базу даних MySQL. В процесі реалізації бази було створено такі таблиці:
-	Users(Таблиця з даними про користувачів);
-	Role(Таблиця з даними про ролі користувачів);
-	Pet(Таблиця з даними домашніх тварин);
-	PetType(Таблиця з даними про типи тварин);
-	StoryOfDisease(Таблиця з даними історії хвороби тварин та датами візитів до клінік).
Реалізовано наступні відношення між таблицями:
-	Користувач може мати декілька ролей через один зв’язок з таблицею ролей;
-	В одного користувача може бути багато домашніх тварин;
-	У кожної тварини може бути одна або декілька історій хвороби;
-	Кожна тварина може мати лише один тип тварини.
 
4 ДІАГРАМА ДІЯЛЬНОСТІ

	У додатку Г на рисунку Г.1 зображено діаграму діяльності звичайного користувача, на якій продемонстровано процес додавання користувачем нової тварини та перевірки усіх своїх домашніх тварин. Спочатку користувач проходить процес авторизації, після чого має можливість перевірити вже зареєстрованих їм тварин та їх історії хвороби. Наступним кроком користувач має змогу додати нову тварину, заповнивши інформацію про неї та обравши тип тварини та знову перевірити список своїх тварин та їх історії хвороби. Також користувач може видалити вже існуючий профіль власної тварини.
 
5 REST СПЕЦИФІКАЦІЯ

	При написанні серверної частини додатку було дотримано принципів REST. Така архітектура визначає, яким чином має бути організована система для можливості її масштабування та простоти інтеграції з різними компонентами. REST специфікація наведена у таблиці 1.

Таблиця 1 – REST-специфікація
Назва	Метод	Шлях	Тіло запиту
Registration	POST	api/register	{
“username”: ”string”,
“email”: ”string”,
“password”: ”string”,
“joined_date”: ”datetime”
}
Authorization	POST	api/token	{
“username”: ”string”,
“password”: ”string”
}
User Profile	POST	api/user/me	-
Create New Pet	POST	api/pets	{
“pet_name”: ”string”,
“pet_type”: int,
“breed”: ”string”,
“vaccinated”: bool
}
Create Disease Story	POST	api/disease_story	{
“first_visit_date”: “date”,
“last_visit_date”: “date”,
“medications”: “string”,
“pet”: int
}
Create Pet Type	POST	api/admin/pet_type	{
“type_name”: “string”
}
Backup Database	POST	api/admin/backup	-
Index(API launch check)	GET	api/	-
Show Pets	GET	api/pets	-
Show Specific Pet	GET	api/pets/{id}	-
Show Disease Stories	GET	api/disease_story	-
Show Specific  Disease Story	GET	api/disease_story/{id}	-
Delete Pet	DELETE	api/ pets/{id}	-
Delete Disease Story	DELETE	api/disease_story/{id}	-
Delete Pet Type	DELETE	api/admin/pet_type/{id}	-
Update Pet Vaccination	PUT	api/pets/{id}/vaccination	{
“vaccinated”: bool}
Update Disease Story	PUT	api/disease_story/{id}	{
“first_visit_date”: “date”,
“last_visit_date”: “date”,
“medications”: “string”
}

6 АРХІТЕКТУРА СЕРВЕРНОЇ ЧАСТИНИ

	Схематичне зображення структури серверу зображено у додатку Д на рисунку Д.1. Для реалізації архітектури серверу було використано стандартну спрощену архітектуру проекту FastAPI. У файлі Models містяться моделі та зв’язки між таблицями.
	У файлі Main містяться контролери, підключення до бази даних, налаштування CORS(Cross-Origin Resourse Sharing) для дозволу запитів з певних доменів, підключення CROS Middleware для налаштування політик безпеки, механізм резервного копіювання, підключення обробників винятків для Tortoise ORM.
	У файлі Authentication знаходяться контекст криптографії з використанням бібліотеки CryptContext для хешування паролів за допомогою bcrypt, завантаження конфігураційних параметрів з файлу “.env”, функції для хешування та перевірки пароля, асинхронна функція для аутентифікації користувача за логіном та паролем, асинхронна функція для генерації JWT токену після успішної аутентифікації та асинхронна функція верифікації токену і отримання користувача з бази даних.
	Файл .env використовується  для зберігання конфігураційних параметрів, таких як підключення до бази даних.
 
ВИСНОВКИ

	У лабораторній роботі було розроблено серверну (back-end) частину для проекту за темою «Програмна система для моніторингу документації та стану здоров’я тварин з метою створення єдиного цифрового реєстру тварин та запобіганню підробок документів “I-Pet”» за допомогою мови програмування Python з використанням фреймворку FastAPI в середовищі PyCharm та базою даних MySQL.
	Посилання на демо-відео:
https://youtu.be/qPKlbSa0mDo
	Посилання на репозиторій GitHub:
https://github.com/NureNotchenkoDaniil/apz-pzpi-21-8-notchenko-daniil
 
